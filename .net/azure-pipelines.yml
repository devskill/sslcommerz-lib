# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master
- staging
- dev

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  projects: '**/**/*.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '2.1.607'

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '2.2.207'

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '3.0.101'

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '3.1.100'

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore *.csproj'
  inputs:
    command: 'restore'
    arguments: '-c $(buildConfiguration)'
    projects: '**/**/*.csproj'
    workingDirectory: '.net/src'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build *.csproj'
  inputs:
    command: 'build'
    arguments: '-c $(buildConfiguration)'
    projects: '**/**/*.csproj'
    workingDirectory: '.net/src'

- task: NuGetToolInstaller@1
  displayName: 'nuget install'
  inputs:
    versionSpec: 
    checkLatest: true

- task: NuGetCommand@2
  displayName: 'nuget restore'
  inputs:
    command: 'restore'
    restoreSolution: '**/**/*.sln'
    feedsToUse: 'select'

- task: MSBuild@1
  displayName: 'msbuild *.csproj dev'
  inputs:
    solution: '**/*.sln'
    msbuildArguments: '-t:Pack -p:PackageVersion=$(alphaVersionEnvVar)'    
    msbuildArchitecture: 'x64'
    platform: 'Any CPU'
    configuration: '$(buildConfiguration)'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))

- task: MSBuild@1
  displayName: 'msbuild *.csproj staging'
  inputs:
    solution: '**/*.sln'
    msbuildArguments: '-t:Pack -p:PackageVersion=$(stagingVersionEnvVar)'    
    msbuildArchitecture: 'x64'
    platform: 'Any CPU'
    configuration: '$(buildConfiguration)'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/staging'))

- task: MSBuild@1
  displayName: 'msbuild *.csproj master'
  inputs:
    solution: '**/*.sln'
    msbuildArguments: '-t:Pack -p:PackageVersion=$(releaseVersionEnvVar)'    
    msbuildArchitecture: 'x64'
    platform: 'Any CPU'
    configuration: '$(buildConfiguration)'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: MSBuild@1
  displayName: 'msbuild *.csproj release'
  inputs:
    solution: '**/*.sln'
    msbuildArchitecture: 'x64'
    platform: 'Any CPU'
    configuration: '$(buildConfiguration)'
  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

- task: NuGetCommand@2
  displayName: 'nuget setApiKey'
  inputs:
    command: 'custom'
    arguments: 'setApiKey $(nugetCredential)'

- task: NuGetCommand@2
  displayName: 'nuget push'
  inputs:
    command: 'push'
    arguments: '-SkipIfAlreadyPublished -SkipDuplicate'
    feedsToUse: 'config'    
    externalFeedCredentials: '$(externalFeedCredentials)' 
    publishFeedCredentials: '$(publishFeedCredentials)'    
    packagesToPush: '.net/src/DevSkill.SSLCommerz/DevSkill.SSLCommerz.Core/bin/Release/*.nu*;!.net/src/DevSkill.SSLCommerz/DevSkill.SSLCommerz.Core/bin/Release/*.symbols.nu*'
    nuGetFeedType: 'external'
    publishVstsFeed: 'DevSkill.SSLCommerz.Core'
    versioningScheme: 'byEnvVar'
    versionEnvVar: '$(versionEnvVar)'
    allowPackageConflicts: false
  condition: and(failed(), eq(variables['Build.Reason'], 'PullRequest'))
